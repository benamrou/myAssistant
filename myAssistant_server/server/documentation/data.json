{
    "project": {
        "name": "Control Room API",
        "description": "Control Room API documentation tool",
        "version": "0.0.01",
        "logo": "../vendor/images/logo/logo.png"
    },
    "files": {
        "server/controller/authentification.js": {
            "name": "server/controller/authentification.js",
            "modules": {},
            "classes": {
                "AUTHENTIFICATION": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/controller/template.js": {
            "name": "server/controller/template.js",
            "modules": {},
            "classes": {
                "TEMPLATE": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/utils/logger.js": {
            "name": "server/utils/logger.js",
            "modules": {},
            "classes": {
                "LOGGER": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/utils/sqlquery.js": {
            "name": "server/utils/sqlquery.js",
            "modules": {},
            "classes": {
                "SQLQUERY": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AUTHENTIFICATION": {
            "name": "AUTHENTIFICATION",
            "shortname": "AUTHENTIFICATION",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "server/controller/authentification.js",
            "line": 1,
            "description": "This is the description for Authentification API class. The initlaized request for CORS (different URL reuqest)\nis managed to support GET, POST, PUT, DELETE and OPTIONS.\nBrowsers are sending an OPTIONS request for authorization before sending the actual request.\n\nAPI Library: /controller/Authentification\n\nThis class is working on a REQUEST => RESPONSE approach\nResponse return sattus:\n   200 OK successful GET\n   201 Created for successful POST.  URI for the created resource is specified in the Location header field\n   204 No Content for successful PUT and DELETE. No message body.\n   400 Bad Request with error, if the new resource to be created through POST already exists\n   404 Not Found with error, if GET or PUT has not found anything matching the Request-URI\n   415 Unsupported Media Type with error, if POST or PUT if the request body is not in application/json MIME type\n   500 Internal Server Error with error, if server encountered an unexpected error while processing the request",
            "author": "Ahmed Benamrouche\nDate: February 2017"
        },
        "TEMPLATE": {
            "name": "TEMPLATE",
            "shortname": "TEMPLATE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "server/controller/template.js",
            "line": 1,
            "description": "This is the description for TEMPLATE API class. The initlaized request for CORS (different URL reuqest)\nis managed to support GET, POST, PUT, DELETE and OPTIONS.\nBrowsers are sending an OPTIONS request for authorization before sending the actual request.\n\nAPI Library: /api/TEMPLATE\n\nThis class is working on a REQUEST => RESPONSE approach {{\\n}}\nResponse return sattus:\n   200 OK successful GET\n   201 Created for successful POST.  URI for the created resource is specified in the Location header field\n   204 No Content for successful PUT and DELETE. No message body.\n   400 Bad Request with error, if the new resource to be created through POST already exists\n   404 Not Found with error, if GET or PUT has not found anything matching the Request-URI\n   415 Unsupported Media Type with error, if POST or PUT if the request body is not in application/json MIME type\n   500 Internal Server Error with error, if server encountered an unexpected error while processing the request"
        },
        "LOGGER": {
            "name": "LOGGER",
            "shortname": "LOGGER",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "server/utils/logger.js",
            "line": 1,
            "description": "This is the description for LOGGER API class. This class manages and generates the LOG file structure.\nThe log foldes logs is structures by apps name then date then user logs.\nEcample :\n    logs > admin > 2.13.2017 > internal.log (contains SERVER internal logs)\n\nServer is expecting USER in the header request transaction. Therefor logs are generated by user at a given date\n\nAPI Library: /utils/logger\n\nThis class is working on a REQUEST => RESPONSE approach",
            "author": "Ahmed Benamrouche\nDate: February 2017"
        },
        "SQLQUERY": {
            "name": "SQLQUERY",
            "shortname": "SQLQUERY",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "server/utils/sqlquery.js",
            "line": 1,
            "description": "This is the description for SQLQUERY API class. This class manages the call and execution of the query.\nThis call return the results of the requestuested query\nAll the SQLQUERY requestuest are logs.\n\nEnvironment variable used:\n  > db.maxRows in the configuration file (config folder). Represent the number of max Rows to fetch.",
            "author": "Ahmed Benamrouche\nDate: February 2017"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "server/controller/authentification.js",
            "line": 27,
            "description": "GET method description.  \nHttp Method: GET\nURL        : /api/authentification/?USER_NAME=...",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "request",
                    "description": "HTTP request. The request must contain :\n      - USER in the header (for log)",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "is the server response",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the user information\n\nsub-module calls LIBQUERY entry ADM0000001",
                "type": "Boolean"
            },
            "class": "AUTHENTIFICATION"
        },
        {
            "file": "server/controller/template.js",
            "line": 25,
            "description": "GET method description.  \nHttp Method: GET\nURL        : /api/TEMPLATE/?USER_NAME=...",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "request",
                    "description": "HTTP request. The request must contain :\n      - USER in the header (for log)",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "is the server response",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the user information\n\nSub-Method calls LIBQUERY entry ADM0000001",
                "type": "Boolean"
            },
            "class": "TEMPLATE"
        },
        {
            "file": "server/utils/logger.js",
            "line": 65,
            "description": "LOG method description. Log function is the main function, capturing and \narchiving the log message in the file structure and console file",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "uniqueID",
                    "description": "represent the logID (equence number) - Reset to 0 if server is restarting",
                    "type": "Integer"
                },
                {
                    "name": "message",
                    "description": "is the message to be displayed/archived",
                    "type": "String"
                },
                {
                    "name": "username",
                    "description": "is the user requesting the transaction\n\nA log is generated in the server log file and logs folder",
                    "type": "String"
                }
            ],
            "class": "LOGGER"
        },
        {
            "file": "server/utils/sqlquery.js",
            "line": 77,
            "description": "Method executeLibQuery is executing a query stored in the LIBQUERY structure through their reference number. \nThe LIBQUERY structure stores referenced queries.",
            "itemtype": "method",
            "name": "executeLibQuery",
            "params": [
                {
                    "name": "querynum",
                    "description": "represents the query ID in the LIBQUERY",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "are the bind variables value. The params object must respect the param varibale in their orders.",
                    "type": "String"
                },
                {
                    "name": "user",
                    "description": "is the user requestuesting this transaction",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "HTTP requestuest. The requestuest must contain :",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "is the query server response (contains the results of the query)\n\nSub-Method calls PKREQUESTMANAGER.CALLQUERY in the Oracle Database",
                    "type": "Object"
                }
            ],
            "class": "SQLQUERY"
        }
    ],
    "warnings": []
}